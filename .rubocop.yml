# Inspired by various gists online and heavily modified to better match a more data-oriented & procedural style of Ruby
# that's pleasant to work with with decent performance for game logic code and scripting.
# -- ZebraInFlames -- Summer 2025

# GEMINI: Require the performance cops and enable new cops from RuboCop updates.
plugins:
  - rubocop-performance

AllCops:
  NewCops: enable
  Include:
    - 'mygame/app/*'
  Exclude:
    - 'mygame/**'
    - '.dragonruby/**/*'
    - 'dr-types/*'
    - 'docs/**/*'
    - 'include/**/*'
    - 'samples/**/*'
    - 'tmp/**/*'

# This should just match whatever you have in the editor of choice.
Layout/LineLength:
  Max: 120

# Metrics -- Lenght metrics; these are somewhat reasonable as metrics, but the default values are way too low.
# Rubocop defaults for method lenght are useless for performance oriented code
Metrics/MethodLength:
  Max: 120
# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500
Metrics/BlockLength:
  Max: 150

# NOTE: We disable a lot of useless 'style-oriented' Metrics, that are known to not improve code quality. Do not know
# why Rubocop cares about them. E.g cyclomatic complexity is an idiotic metric that does not make sense for any sort of
# code as a continuous measure - at least in the default values (so we bump it up considerably).
Metrics/AbcSize:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: true
  Max: 30

Metrics/PerceivedComplexity:
  Enabled: true
  Max: 30

Metrics/ParameterLists:
  Enabled: false

# --- Layout and Style ---
Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundBlockParameters:
  EnforcedStyleInsidePipes: no_space

Layout/SpaceAroundOperators:
  EnforcedStyleForRationalLiterals: space

Style/StringLiterals:
  EnforcedStyle: single_quotes

Style/SymbolArray:
  EnforcedStyle: percent

Layout/HashAlignment:
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table

Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

Style/PreferredHashMethods:
  Enabled: false

# We don't care about method names versus logical operators
Style/NumericPredicate:
  Enabled: false

# String#% is a good choice for performance and provides a clear, object-oriented API.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    reduce: "reduce"

# We don't really care; no parens is more pleasant to read; this is a fully personal preference.
Style/MethodDefParentheses:
  Enabled: true
  EnforcedStyle: require_no_parentheses

# Allow multiple assignment and parallel assignment
Style/ParallelAssignment:
  Enabled: false
Layout/MultilineAssignmentLayout:
  Enabled: false

# --- Control Flow and Conditionals ---
Style/ParenthesesAroundCondition:
  Enabled: false

# This is common enough in safe assignments that it makes sense to allow it.
Lint/AssignmentInCondition:
  AllowSafeAssignment: true

# --- Exceptions ---
# TODO: this section should be reviewed.
Style/RaiseArgs:
  Enabled: false

Style/SignalException:
  EnforcedStyle: only_raise

Lint/SuppressedException:
  Enabled: false

# --- Blocks and Methods ---
Layout/DotPosition:
  Enabled: false

Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: true

Style/BlockDelimiters:
  Enabled: false

Style/MethodCalledOnDoEndBlock:
  Enabled: true

Style/SingleLineBlockParams:
  Enabled: false

Lint/ShadowingOuterLocalVariable:
  Enabled: false

Naming/MethodParameterName:
  Enabled: false

# --- General ---
Style/Documentation:
  Enabled: false

Naming/BinaryOperatorParameterName:
  Enabled: false

Lint/Debugger:
  Enabled: true
# --- Performance and Allocations (Powered by rubocop-performance) ---
# The `require: rubocop-performance` at the top enables all performance cops.
# The following are key configurations for your goals.

# GEMINI: This is the single most impactful change for reducing string allocations.
Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: always

# GEMINI: Enforces `sum` over `inject(:+)` for numeric sums, which is faster.
# This is a good trade-off against the general `reduce: 'inject'` preference.
Performance/Sum:
  Enabled: true

# GEMINI: Enforces faster string replacement methods like `tr` over `gsub`.
Performance/StringReplacement:
  Enabled: true

# GEMINI: Prevents creating unnecessary intermediate arrays in chained calls.
Performance/ChainArrayAllocation:
  Enabled: true

# GEMINI: Prevents allocating new arrays/hashes on every loop iteration.
Performance/CollectionLiteralInLoop:
  Enabled: true